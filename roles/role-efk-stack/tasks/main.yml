---
- name: Add Elastic operator chart repo
  community.kubernetes.helm_repository:
    name: elastic
    repo_url: "https://helm.elastic.co"

- name: Add fluentbit chart repo
  community.kubernetes.helm_repository:
    name: fluent
    repo_url: "https://fluent.github.io/helm-charts"

- name: Update helm repo
  command: helm repo update

- name: Deploy elastic-operator chart inside {{ elastic_namespace }} namespace with values
  community.kubernetes.helm:
    name: elastic-operator
    chart_ref: elastic/eck-operator
    release_namespace: "{{ elastic_namespace }}"
    create_namespace: yes
    force: yes
    values:
      installCRDs: true
      replicaCount: 1
      tolerations:
        - key: "{{ elastic_operator_taint }}"
          effect: NoSchedule
      podMonitor:
        enabled: true
        namespace: "{{ prometheus_stack_namespace }}"
        labels:
          release: "{{ prometheus_stack_release_name }}"
          app: kube-prometheus-stack
      config:
        metricsPort: 8088

- name: Wait for pods created
  become: false
  command: kubectl get po -A
  register: logging_po
  until: 'logging_po.stdout.find("{{ elastic_namespace }}") != -1'
  retries: 10
  delay: 10

- name: Wait for Elastic Operator pods become ready
  command: "kubectl wait --namespace={{ elastic_namespace }} --for=condition=Ready --all pods --timeout=900s"

- name: Create {{ logging_namespace }} namespace
  community.kubernetes.k8s:
    state: present
    kubeconfig: "{{k8s_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        labels:
          app: logging
        name: "{{ logging_namespace }}"

- name: Deploy Elasticsearch
  community.kubernetes.k8s:
    state: present
    kubeconfig: "{{ k8s_kubeconfig }}"
    definition:
      apiVersion: elasticsearch.k8s.elastic.co/v1
      kind: Elasticsearch
      metadata:
        name: "{{ elastic_name }}"
        namespace: "{{ logging_namespace }}"
      spec:
        version: "{{ elastic_version }}"
        nodeSets:
        - name: default
          count: "{{ elastic_count }}"
          config:
            node.master: true
            node.data: true
            node.ingest: true
            node.store.allow_mmap: false
          podTemplate:
            spec:
              tolerations:
                - effect: NoSchedule
                  key: "{{ elastic_app_taint }}"

- name: Deploy Kibana
  community.kubernetes.k8s:
    state: present
    kubeconfig: "{{ k8s_kubeconfig }}"
    definition:
      apiVersion: kibana.k8s.elastic.co/v1
      kind: Kibana
      metadata:
        name: "{{ kibana_name }}"
        namespace: "{{ logging_namespace }}"
      spec:
        version: "{{ elastic_version }}"
        count: "{{ kibana_count }}"
        elasticsearchRef:
          name: "{{ elastic_name }}"
        http:
          tls:
            selfSignedCertificate:
              disabled: true
        podTemplate:
          spec:
            tolerations:
              - effect: NoSchedule
                key: "{{ elastic_app_taint }}"

- name: Wait for ElasticSearch and kibana pods become ready
  command: "kubectl wait --namespace={{ logging_namespace }} --for=condition=Ready --all pods --timeout=900s"

- name: Wait for elasticsearch user secret creating
  command: "kubectl get secret -n {{ logging_namespace }}"
  register: es_secret
  until: 'es_secret.stdout.find("{{ elastic_name }}-es-elastic-user") != -1'
  retries: 10
  delay: 10

- name: Get Elastic password
  command: "kubectl get secret {{ elastic_name }}-es-elastic-user -n {{ logging_namespace }} -o go-template='{{ '{{' }}.data.elastic | base64decode {{ '}}' }}'"
  register: elastic_pass

- name: Deploy Fluentbit chart inside "{{ logging_namespace }}" namespace with values
  community.kubernetes.helm:
    name: fluentbit
    chart_ref: fluent/fluent-bit
    release_namespace: "{{ logging_namespace }}"
    create_namespace: yes
    force: yes
    values:
      config:
        service: | 
          {{ fluentbit_service }}
        ## https://docs.fluentbit.io/manual/pipeline/inputs
        inputs: |
          {{ fluentbit_input }}
        ## https://docs.fluentbit.io/manual/pipeline/filters
        filters: |
          {{ fluentbit_filter }}
        ## https://docs.fluentbit.io/manual/pipeline/outputs
        outputs: |
          {{ fluentbit_output }}
        ## https://docs.fluentbit.io/manual/pipeline/parsers
        customParsers: |
          {{ fluentbit_customParsers }}
      serviceMonitor:
        enabled: "true"
        namespace: logging
        interval: 10s
        scrapeTimeout: 10s
        selector:
          release: "{{ prometheus_stack_release_name }}"
      prometheusRule:
        enabled: true
        namespace: "{{ prometheus_stack_namespace }}"
        additionalLabels:
          release: "{{ prometheus_stack_release_name }}"
          app: kube-prometheus-stack
        rules:
        - alert: NoOutputBytesProcessed
          expr: rate(fluentbit_output_proc_bytes_total[5m]) == 0
          annotations:
            message: |
              Fluent Bit instance {{ '{{' }} $labels.instance {{ '}}' }}'s output plugin {{ '{{' }} $labels.name {{ '}}' }} has not processed any
              bytes for at least 15 minutes.
            summary: No Output Bytes Processed
          for: 15m
          labels:
            severity: critical
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: node-role.kubernetes.io/gw
          effect: NoSchedule
        - key: node-role.kubernetes.io/worker
          effect: NoSchedule

- name: Deploy ingress for kibana
  community.kubernetes.k8s:
    state: present
    kubeconfig: "{{ k8s_kubeconfig }}"
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: "{{ kibana_ingress_name }}"
        namespace: "{{ logging_namespace }}"
      spec:
        rules:
        - host: "{{ kibana_host }}"
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: "{{ kibana_service_name }}"
                  port:
                    number: 5601

- name: Add fluentbit grafana dashboard
  community.kubernetes.k8s:
    state: present
    kubeconfig: "{{ k8s_kubeconfig }}"
    definition: "{{ lookup('file', 'roles/role-efk-stack/files/fluentbit-dashboard-cm.yaml') | from_yaml }}"
    namespace: "{{ prometheus_stack_namespace }}"
    validate:
      fail_on_error: yes      

- name: Wait for Fluentbit pods become ready
  command: "kubectl wait --namespace={{ logging_namespace }} --for=condition=Ready --all pods --timeout=600s"