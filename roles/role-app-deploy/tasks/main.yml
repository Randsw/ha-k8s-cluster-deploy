
---
- name: Create vault init bash script
  template:
    dest: /tmp/app-vault-init.sh
    src: app-vault-init.sh.j2
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0555

- name: Copy file to pod
  shell: kubectl cp /tmp/app-vault-init.sh vault-0:/tmp/app-vault-init.sh -n vault

- name: Delete tmp file
  file:
    dest: /tmp/app-vault-init.sh
    state: absent

- name: Execute vault init script
  shell: kubectl exec vault-0 -n vault -- /bin/sh -c "/tmp/app-vault-init.sh"
  register: vault_init_script_result

- name: Copy Helm chart to ansible executor
  copy:
    src: Helm/echo-app
    dest: ~/{{ ansible_user }}

- name: Deploy echo app chart inside namespace1 namespace
  community.kubernetes.helm:
    name: "{{ chart_name }}"
    chart_ref: ~/{{ ansible_user }}/echo-app
    release_namespace: "{{ k8s_namespace}}"
    create_namespace: yes
    force: yes

- name: Wait for vault pods become ready
  shell: "kubectl wait --namespace={{ k8s_namespace }} --for=condition=Ready --all pods --timeout=60s"
  register: vault_ready

- name: Get Token of service account
  shell: 'kubectl get serviceaccount {{ k8s_sa_name }} -n {{ k8s_namespace }} -o json | jq -r ".secrets[].name"'
  register: issuer_sa_token
  changed_when: false

- name: Put sa token in variable
  set_fact:
    ISSUER_SECRET_REF: "{{ issuer_sa_token.stdout }}"

- name: Deploy Issuer
  community.kubernetes.k8s:
    state: present
    kubeconfig: "{{ k8s_kubeconfig }}"
    definition:
      apiVersion: cert-manager.io/v1alpha2
      kind: Issuer
      metadata:
        name: "{{ issuer_name }}"
        namespace: "{{ k8s_namespace }}"
      spec:
        vault:
          server: http://vault.vault
          path: pki/sign/{{ pki_role }}
          auth:
            kubernetes:      
              mountPath: /v1/auth/kubernetes
              role: "{{ k8s_sa_name }}"
              secretRef:
                name: "{{ ISSUER_SECRET_REF }}"
                key: token      

- name: Deploy Certificate
  community.kubernetes.k8s:
    state: present
    kubeconfig: "{{ k8s_kubeconfig }}"
    definition:
      apiVersion: cert-manager.io/v1alpha2
      kind: Certificate
      metadata:
        name: "{{ cert_name }}"
        namespace: "{{ k8s_namespace }}"
      spec:
        secretName: "{{ secret_name }}"
        issuerRef:
          name: "{{ issuer_name }}"
        commonName: "{{ server_name }}"
        dnsNames:
        - "{{ dns_server_name }}"    
